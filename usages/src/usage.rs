// This file is generated by the build script. Do not edit.
use material_yew::*;
use yew::{html, AttrValue, Callback, Html};

pub fn test_menu(children: Html) -> Html {
    html! {
        <Menu
            anchor={AttrValue::Static("<some anchor>")}
            positioning={AttrValue::Static("<some positioning>")}
            quick={false}
            has_overflow={false}
            open={false}
            anchor_corner={AttrValue::Static("<some anchor_corner>")}
            menu_corner={AttrValue::Static("<some menu_corner>")}
            stay_open_on_outside_click={false}
            stay_open_on_focusout={false}
            skip_restore_focus={false}
            default_focus={AttrValue::Static("<some default_focus>")}
            is_submenu={false}
        >
            {children}
        </Menu>
    }
}

pub fn test_button(children: Html) -> Html {
    html! {
        <Button
            disabled={false}
            href={AttrValue::Static("<some href>")}
            target={AttrValue::Static("<some target>")}
            trailing_icon={false}
            has_icon={false}
            r#type={AttrValue::Static("<some type>")}
            value={AttrValue::Static("<some value>")}
            name={AttrValue::Static("<some name>")}
            variant={ButtonVariants :: Elevated}
            onclick={Callback :: noop ()}
        >
            {children}
        </Button>
    }
}

pub fn test_circular_progress() -> Html {
    html! {
        <CircularProgress
            value={0.5}
            max={1.0}
            indeterminate={true}
            four_color={false}
        >
        </CircularProgress>
    }
}

pub fn test_icon_button(children: Html) -> Html {
    html! {
        <IconButton
            disabled={false}
            flip_icon_in_rtl={false}
            href={AttrValue::Static("<some href>")}
            target={AttrValue::Static("<some target>")}
            aria_label_selected={AttrValue::Static("<some aria_label_selected>")}
            toggle={false}
            selected={false}
            typepe={AttrValue::Static("<some typepe>")}
            value={AttrValue::Static("<some value>")}
            name={AttrValue::Static("<some name>")}
            variant={IconButtonVariants :: Standard}
            onclick={Callback :: noop ()}
            oninput={Callback :: noop ()}
            onchange={Callback :: noop ()}
        >
            {children}
        </IconButton>
    }
}

pub fn test_radio() -> Html {
    html! {
        <Radio
            disabled={false}
            value={AttrValue::Static("<some value>")}
            checked={false}
            name={AttrValue::Static("<some name>")}
            oninput={Callback :: noop ()}
            onchange={Callback :: noop ()}
        >
        </Radio>
    }
}

pub fn test_list_item(children: Html) -> Html {
    html! {
        <ListItem
            disabled={false}
            typepe={AttrValue::Static("<some typepe>")}
            href={AttrValue::Static("<some href>")}
            target={AttrValue::Static("<some target>")}
            onfocus={Callback :: noop ()}
        >
            {children}
        </ListItem>
    }
}

pub fn test_list(children: Html) -> Html {
    html! {
        <List
        >
            {children}
        </List>
    }
}

pub fn test_switch() -> Html {
    html! {
        <Switch
            disabled={false}
            selected={false}
            icons={false}
            show_only_selected_icon={false}
            required={false}
            value={AttrValue::Static("<some value>")}
            name={AttrValue::Static("<some name>")}
            validation_message={AttrValue::Static("<some validation_message>")}
            will_validate={false}
            oninput={Callback :: noop ()}
            onchange={Callback :: noop ()}
        >
        </Switch>
    }
}

pub fn test_chip(children: Html) -> Html {
    html! {
        <Chip
            elevated={false}
            href={AttrValue::Static("<some href>")}
            target={AttrValue::Static("<some target>")}
            disabled={false}
            always_focusable={false}
            label={AttrValue::Static("<some label>")}
            variant={ChipVariants :: Assist}
        >
            {children}
        </Chip>
    }
}

pub fn test_sub_menu(children: Html) -> Html {
    html! {
        <SubMenu
            anchor_corner={AttrValue::Static("<some anchor_corner>")}
            menu_corner={AttrValue::Static("<some menu_corner>")}
            is_sub_menu={false}
        >
            {children}
        </SubMenu>
    }
}

pub fn test_fab(children: Html) -> Html {
    html! {
        <Fab
            variant={Some(FabVariant::Primary)}
            size={Some(FabSize::Large)}
            label={AttrValue::Static("<some label>")}
            lowered={false}
            style={FabStyle::Standard}
        >
            {children}
        </Fab>
    }
}

pub fn test_linear_progress() -> Html {
    html! {
        <LinearProgress
            indeterminate={false}
            four_color={false}
        >
        </LinearProgress>
    }
}

pub fn test_slider() -> Html {
    html! {
        <Slider
            disabled={false}
            value_label={AttrValue::Static("<some value_label>")}
            value_label_start={AttrValue::Static("<some value_label_start>")}
            value_label_end={AttrValue::Static("<some value_label_end>")}
            aria_label_start={AttrValue::Static("<some aria_label_start>")}
            aria_value_text_start={AttrValue::Static("<some aria_value_text_start>")}
            aria_label_end={AttrValue::Static("<some aria_label_end>")}
            aria_value_text_end={AttrValue::Static("<some aria_value_text_end>")}
            ticks={false}
            labeled={false}
            range={false}
            name={AttrValue::Static("<some name>")}
            name_start={AttrValue::Static("<some name_start>")}
            name_end={AttrValue::Static("<some name_end>")}
        >
        </Slider>
    }
}

pub fn test_checkbox() -> Html {
    html! {
        <Checkbox
            checked={false}
            disabled={false}
            indeterminate={false}
            required={false}
            value={AttrValue::Static("<some value>")}
            name={AttrValue::Static("<some name>")}
            validation_message={AttrValue::Static("<some validation_message>")}
            will_validate={false}
            onclick={Callback :: noop ()}
        >
        </Checkbox>
    }
}

pub fn test_menu_item(children: Html) -> Html {
    html! {
        <MenuItem
            disabled={false}
            typepe={AttrValue::Static("<some typepe>")}
            href={AttrValue::Static("<some href>")}
            target={AttrValue::Static("<some target>")}
            keep_open={false}
            selected={false}
            typepeahead_text={AttrValue::Static("<some typepeahead_text>")}
        >
            {children}
        </MenuItem>
    }
}
